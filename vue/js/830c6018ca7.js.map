{"version":3,"sources":["webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Ring.js","webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Sprite.js","webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Star.js","webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Text.js","webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/TextPath.js","webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Wedge.js"],"names":[],"mappings":"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","file":"js/830c6018ca7.js","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar PIx2 = Math.PI * 2;\nexport class Ring extends Shape {\n    _sceneFunc(context) {\n        context.beginPath();\n        context.arc(0, 0, this.innerRadius(), 0, PIx2, false);\n        context.moveTo(this.outerRadius(), 0);\n        context.arc(0, 0, this.outerRadius(), PIx2, 0, true);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    getWidth() {\n        return this.outerRadius() * 2;\n    }\n    getHeight() {\n        return this.outerRadius() * 2;\n    }\n    setWidth(width) {\n        this.outerRadius(width / 2);\n    }\n    setHeight(height) {\n        this.outerRadius(height / 2);\n    }\n}\nRing.prototype.className = 'Ring';\nRing.prototype._centroid = true;\nRing.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\n_registerNode(Ring);\nFactory.addGetterSetter(Ring, 'innerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Ring, 'outerRadius', 0, getNumberValidator());\n","import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Animation } from '../Animation.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Sprite extends Shape {\n    constructor(config) {\n        super(config);\n        this._updated = true;\n        this.anim = new Animation(() => {\n            var updated = this._updated;\n            this._updated = false;\n            return updated;\n        });\n        this.on('animationChange.konva', function () {\n            this.frameIndex(0);\n        });\n        this.on('frameIndexChange.konva', function () {\n            this._updated = true;\n        });\n        this.on('frameRateChange.konva', function () {\n            if (!this.anim.isRunning()) {\n                return;\n            }\n            clearInterval(this.interval);\n            this._setInterval();\n        });\n    }\n    _sceneFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();\n        if (this.hasFill() || this.hasStroke()) {\n            context.beginPath();\n            context.rect(0, 0, width, height);\n            context.closePath();\n            context.fillStrokeShape(this);\n        }\n        if (image) {\n            if (offsets) {\n                var offset = offsets[anim], ix2 = index * 2;\n                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n            }\n            else {\n                context.drawImage(image, x, y, width, height, 0, 0, width, height);\n            }\n        }\n    }\n    _hitFunc(context) {\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];\n        context.beginPath();\n        if (offsets) {\n            var offset = offsets[anim];\n            var ix2 = index * 2;\n            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n        }\n        else {\n            context.rect(0, 0, width, height);\n        }\n        context.closePath();\n        context.fillShape(this);\n    }\n    _useBufferCanvas() {\n        return super._useBufferCanvas(true);\n    }\n    _setInterval() {\n        var that = this;\n        this.interval = setInterval(function () {\n            that._updateIndex();\n        }, 1000 / this.frameRate());\n    }\n    start() {\n        if (this.isRunning()) {\n            return;\n        }\n        var layer = this.getLayer();\n        this.anim.setLayers(layer);\n        this._setInterval();\n        this.anim.start();\n    }\n    stop() {\n        this.anim.stop();\n        clearInterval(this.interval);\n    }\n    isRunning() {\n        return this.anim.isRunning();\n    }\n    _updateIndex() {\n        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;\n        if (index < len - 1) {\n            this.frameIndex(index + 1);\n        }\n        else {\n            this.frameIndex(0);\n        }\n    }\n}\nSprite.prototype.className = 'Sprite';\n_registerNode(Sprite);\nFactory.addGetterSetter(Sprite, 'animation');\nFactory.addGetterSetter(Sprite, 'animations');\nFactory.addGetterSetter(Sprite, 'frameOffsets');\nFactory.addGetterSetter(Sprite, 'image');\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\nFactory.backCompat(Sprite, {\n    index: 'frameIndex',\n    getIndex: 'getFrameIndex',\n    setIndex: 'setFrameIndex',\n});\n","import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Star extends Shape {\n    _sceneFunc(context) {\n        var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();\n        context.beginPath();\n        context.moveTo(0, 0 - outerRadius);\n        for (var n = 1; n < numPoints * 2; n++) {\n            var radius = n % 2 === 0 ? outerRadius : innerRadius;\n            var x = radius * Math.sin((n * Math.PI) / numPoints);\n            var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);\n            context.lineTo(x, y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    getWidth() {\n        return this.outerRadius() * 2;\n    }\n    getHeight() {\n        return this.outerRadius() * 2;\n    }\n    setWidth(width) {\n        this.outerRadius(width / 2);\n    }\n    setHeight(height) {\n        this.outerRadius(height / 2);\n    }\n}\nStar.prototype.className = 'Star';\nStar.prototype._centroid = true;\nStar.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\n_registerNode(Star);\nFactory.addGetterSetter(Star, 'numPoints', 5, getNumberValidator());\nFactory.addGetterSetter(Star, 'innerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Star, 'outerRadius', 0, getNumberValidator());\n","import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n    return Array.from(string);\n}\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        if (!shouldWrap ||\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                            var lastLine = this.textArr[this.textArr.length - 1];\n                            if (lastLine) {\n                                if (shouldAddEllipsis) {\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n                                    if (!haveSpace) {\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                                    }\n                                    this.textArr.splice(this.textArr.length - 1, 1);\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\n                                }\n                            }\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\n","import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Path } from './Path.js';\nimport { Text, stringToArray } from './Text.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EMPTY_STRING = '', NORMAL = 'normal';\nfunction _fillFunc(context) {\n    context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this.partialText, 0, 0);\n}\nexport class TextPath extends Shape {\n    constructor(config) {\n        super(config);\n        this.dummyCanvas = Util.createCanvasElement();\n        this.dataArray = [];\n        this.dataArray = Path.parsePathData(this.attrs.data);\n        this.on('dataChange.konva', function () {\n            this.dataArray = Path.parsePathData(this.attrs.data);\n            this._setTextData();\n        });\n        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', this.textBaseline());\n        context.setAttr('textAlign', 'left');\n        context.save();\n        var textDecoration = this.textDecoration();\n        var fill = this.fill();\n        var fontSize = this.fontSize();\n        var glyphInfo = this.glyphInfo;\n        if (textDecoration === 'underline') {\n            context.beginPath();\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            context.save();\n            var p0 = glyphInfo[i].p0;\n            context.translate(p0.x, p0.y);\n            context.rotate(glyphInfo[i].rotation);\n            this.partialText = glyphInfo[i].text;\n            context.fillStrokeShape(this);\n            if (textDecoration === 'underline') {\n                if (i === 0) {\n                    context.moveTo(0, fontSize / 2 + 1);\n                }\n                context.lineTo(fontSize, fontSize / 2 + 1);\n            }\n            context.restore();\n        }\n        if (textDecoration === 'underline') {\n            context.strokeStyle = fill;\n            context.lineWidth = fontSize / 20;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _hitFunc(context) {\n        context.beginPath();\n        var glyphInfo = this.glyphInfo;\n        if (glyphInfo.length >= 1) {\n            var p0 = glyphInfo[0].p0;\n            context.moveTo(p0.x, p0.y);\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            var p1 = glyphInfo[i].p1;\n            context.lineTo(p1.x, p1.y);\n        }\n        context.setAttr('lineWidth', this.fontSize());\n        context.setAttr('strokeStyle', this.colorKey);\n        context.stroke();\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    setText(text) {\n        return Text.prototype.setText.call(this, text);\n    }\n    _getContextFont() {\n        return Text.prototype._getContextFont.call(this);\n    }\n    _getTextSize(text) {\n        var dummyCanvas = this.dummyCanvas;\n        var _context = dummyCanvas.getContext('2d');\n        _context.save();\n        _context.font = this._getContextFont();\n        var metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: parseInt(this.attrs.fontSize, 10),\n        };\n    }\n    _setTextData() {\n        var that = this;\n        var size = this._getTextSize(this.attrs.text);\n        var letterSpacing = this.letterSpacing();\n        var align = this.align();\n        var kerningFunc = this.kerningFunc();\n        this.textWidth = size.width;\n        this.textHeight = size.height;\n        var textFullWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n        this.glyphInfo = [];\n        var fullPathWidth = 0;\n        for (var l = 0; l < that.dataArray.length; l++) {\n            if (that.dataArray[l].pathLength > 0) {\n                fullPathWidth += that.dataArray[l].pathLength;\n            }\n        }\n        var offset = 0;\n        if (align === 'center') {\n            offset = Math.max(0, fullPathWidth / 2 - textFullWidth / 2);\n        }\n        if (align === 'right') {\n            offset = Math.max(0, fullPathWidth - textFullWidth);\n        }\n        var charArr = stringToArray(this.text());\n        var spacesNumber = this.text().split(' ').length - 1;\n        var p0, p1, pathCmd;\n        var pIndex = -1;\n        var currentT = 0;\n        var getNextPathSegment = function () {\n            currentT = 0;\n            var pathData = that.dataArray;\n            for (var j = pIndex + 1; j < pathData.length; j++) {\n                if (pathData[j].pathLength > 0) {\n                    pIndex = j;\n                    return pathData[j];\n                }\n                else if (pathData[j].command === 'M') {\n                    p0 = {\n                        x: pathData[j].points[0],\n                        y: pathData[j].points[1],\n                    };\n                }\n            }\n            return {};\n        };\n        var findSegmentToFitCharacter = function (c) {\n            var glyphWidth = that._getTextSize(c).width + letterSpacing;\n            if (c === ' ' && align === 'justify') {\n                glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\n            }\n            var currLen = 0;\n            var attempts = 0;\n            p1 = undefined;\n            while (Math.abs(glyphWidth - currLen) / glyphWidth > 0.01 &&\n                attempts < 20) {\n                attempts++;\n                var cumulativePathLength = currLen;\n                while (pathCmd === undefined) {\n                    pathCmd = getNextPathSegment();\n                    if (pathCmd &&\n                        cumulativePathLength + pathCmd.pathLength < glyphWidth) {\n                        cumulativePathLength += pathCmd.pathLength;\n                        pathCmd = undefined;\n                    }\n                }\n                if (pathCmd === {} || p0 === undefined) {\n                    return undefined;\n                }\n                var needNewSegment = false;\n                switch (pathCmd.command) {\n                    case 'L':\n                        if (Path.getLineLength(p0.x, p0.y, pathCmd.points[0], pathCmd.points[1]) > glyphWidth) {\n                            p1 = Path.getPointOnLine(glyphWidth, p0.x, p0.y, pathCmd.points[0], pathCmd.points[1], p0.x, p0.y);\n                        }\n                        else {\n                            pathCmd = undefined;\n                        }\n                        break;\n                    case 'A':\n                        var start = pathCmd.points[4];\n                        var dTheta = pathCmd.points[5];\n                        var end = pathCmd.points[4] + dTheta;\n                        if (currentT === 0) {\n                            currentT = start + 0.00000001;\n                        }\n                        else if (glyphWidth > currLen) {\n                            currentT += ((Math.PI / 180.0) * dTheta) / Math.abs(dTheta);\n                        }\n                        else {\n                            currentT -= ((Math.PI / 360.0) * dTheta) / Math.abs(dTheta);\n                        }\n                        if ((dTheta < 0 && currentT < end) ||\n                            (dTheta >= 0 && currentT > end)) {\n                            currentT = end;\n                            needNewSegment = true;\n                        }\n                        p1 = Path.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);\n                        break;\n                    case 'C':\n                        if (currentT === 0) {\n                            if (glyphWidth > pathCmd.pathLength) {\n                                currentT = 0.00000001;\n                            }\n                            else {\n                                currentT = glyphWidth / pathCmd.pathLength;\n                            }\n                        }\n                        else if (glyphWidth > currLen) {\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength / 2;\n                        }\n                        else {\n                            currentT = Math.max(currentT - (currLen - glyphWidth) / pathCmd.pathLength / 2, 0);\n                        }\n                        if (currentT > 1.0) {\n                            currentT = 1.0;\n                            needNewSegment = true;\n                        }\n                        p1 = Path.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);\n                        break;\n                    case 'Q':\n                        if (currentT === 0) {\n                            currentT = glyphWidth / pathCmd.pathLength;\n                        }\n                        else if (glyphWidth > currLen) {\n                            currentT += (glyphWidth - currLen) / pathCmd.pathLength;\n                        }\n                        else {\n                            currentT -= (currLen - glyphWidth) / pathCmd.pathLength;\n                        }\n                        if (currentT > 1.0) {\n                            currentT = 1.0;\n                            needNewSegment = true;\n                        }\n                        p1 = Path.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);\n                        break;\n                }\n                if (p1 !== undefined) {\n                    currLen = Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\n                }\n                if (needNewSegment) {\n                    needNewSegment = false;\n                    pathCmd = undefined;\n                }\n            }\n        };\n        var testChar = 'C';\n        var glyphWidth = that._getTextSize(testChar).width + letterSpacing;\n        var lettersInOffset = offset / glyphWidth - 1;\n        for (var k = 0; k < lettersInOffset; k++) {\n            findSegmentToFitCharacter(testChar);\n            if (p0 === undefined || p1 === undefined) {\n                break;\n            }\n            p0 = p1;\n        }\n        for (var i = 0; i < charArr.length; i++) {\n            findSegmentToFitCharacter(charArr[i]);\n            if (p0 === undefined || p1 === undefined) {\n                break;\n            }\n            var width = Path.getLineLength(p0.x, p0.y, p1.x, p1.y);\n            var kern = 0;\n            if (kerningFunc) {\n                try {\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n                }\n                catch (e) {\n                    kern = 0;\n                }\n            }\n            p0.x += kern;\n            p1.x += kern;\n            this.textWidth += kern;\n            var midpoint = Path.getPointOnLine(kern + width / 2.0, p0.x, p0.y, p1.x, p1.y);\n            var rotation = Math.atan2(p1.y - p0.y, p1.x - p0.x);\n            this.glyphInfo.push({\n                transposeX: midpoint.x,\n                transposeY: midpoint.y,\n                text: charArr[i],\n                rotation: rotation,\n                p0: p0,\n                p1: p1,\n            });\n            p0 = p1;\n        }\n    }\n    getSelfRect() {\n        if (!this.glyphInfo.length) {\n            return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n            };\n        }\n        var points = [];\n        this.glyphInfo.forEach(function (info) {\n            points.push(info.p0.x);\n            points.push(info.p0.y);\n            points.push(info.p1.x);\n            points.push(info.p1.y);\n        });\n        var minX = points[0] || 0;\n        var maxX = points[0] || 0;\n        var minY = points[1] || 0;\n        var maxY = points[1] || 0;\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            minX = Math.min(minX, x);\n            maxX = Math.max(maxX, x);\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        var fontSize = this.fontSize();\n        return {\n            x: minX - fontSize / 2,\n            y: minY - fontSize / 2,\n            width: maxX - minX + fontSize,\n            height: maxY - minY + fontSize,\n        };\n    }\n}\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n_registerNode(TextPath);\nFactory.addGetterSetter(TextPath, 'data');\nFactory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory.addGetterSetter(TextPath, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory.addGetterSetter(TextPath, 'align', 'left');\nFactory.addGetterSetter(TextPath, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory.addGetterSetter(TextPath, 'kerningFunc', null);\n","import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { Konva } from '../Global.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class Wedge extends Shape {\n    _sceneFunc(context) {\n        context.beginPath();\n        context.arc(0, 0, this.radius(), 0, Konva.getAngle(this.angle()), this.clockwise());\n        context.lineTo(0, 0);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nWedge.prototype.className = 'Wedge';\nWedge.prototype._centroid = true;\nWedge.prototype._attrsAffectingSize = ['radius'];\n_registerNode(Wedge);\nFactory.addGetterSetter(Wedge, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(Wedge, 'angle', 0, getNumberValidator());\nFactory.addGetterSetter(Wedge, 'clockwise', false);\nFactory.backCompat(Wedge, {\n    angleDeg: 'angle',\n    getAngleDeg: 'getAngle',\n    setAngleDeg: 'setAngle',\n});\n"],"sourceRoot":""}