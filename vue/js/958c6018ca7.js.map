{"version":3,"sources":["webpack://webpack-web/./node_modules/_konva@8.3.10@konva/lib/shapes/Transformer.js"],"names":[],"mappings":"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","file":"js/958c6018ca7.js","sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e.evt, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e.evt, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n    getClientRect() {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"],"sourceRoot":""}